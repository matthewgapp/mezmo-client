/*
 * Log Analysis API
 *
 * *REST API to send log data, export data and manage configuration*  To utilize the inline testing functionality here, please go into your Mezmo account and add the following address to your CORS Origins page: `https://docs.mezmo.com`. 
 *
 * The version of the OpenAPI document: 2.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`delete_v1_config_exclusions_single`]
#[derive(Clone, Debug, Default)]
pub struct DeleteV1ConfigExclusionsSingleParams {
    /// ID of an exclusion rule.
    pub id: String
}

/// struct for passing parameters to the method [`get_v1_config_exclusions_single`]
#[derive(Clone, Debug, Default)]
pub struct GetV1ConfigExclusionsSingleParams {
    /// ID of an exclusion rule.
    pub id: String
}

/// struct for passing parameters to the method [`patch_v1_config_exclusions_single`]
#[derive(Clone, Debug, Default)]
pub struct PatchV1ConfigExclusionsSingleParams {
    /// ID of an exclusion rule.
    pub id: String,
    /// Request parameters
    pub stream_exclusion_request: crate::models::StreamExclusionRequest
}

/// struct for passing parameters to the method [`post_v1_config_exclusions`]
#[derive(Clone, Debug, Default)]
pub struct PostV1ConfigExclusionsParams {
    /// Request parameters
    pub stream_exclusion_request: crate::models::StreamExclusionRequest
}


/// struct for typed errors of method [`delete_v1_config_exclusions_single`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteV1ConfigExclusionsSingleError {
    Status404(crate::models::ErrPropsDefault),
    Status500(crate::models::ErrPropsDefault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_v1_config_exclusions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetV1ConfigExclusionsError {
    Status500(crate::models::ErrPropsDefault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_v1_config_exclusions_single`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetV1ConfigExclusionsSingleError {
    Status400(crate::models::ErrPropsDefault),
    Status404(crate::models::ErrPropsDefault),
    Status500(crate::models::ErrPropsDefault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`patch_v1_config_exclusions_single`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PatchV1ConfigExclusionsSingleError {
    Status400(crate::models::ErrPropsDefault),
    Status500(crate::models::ErrPropsDefault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_v1_config_exclusions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostV1ConfigExclusionsError {
    Status400(crate::models::ErrPropsDefault),
    Status500(crate::models::ErrPropsDefault),
    UnknownValue(serde_json::Value),
}


/// Use this method to delete an exclusion rule.
pub async fn delete_v1_config_exclusions_single(configuration: &configuration::Configuration, params: DeleteV1ConfigExclusionsSingleParams) -> Result<(), Error<DeleteV1ConfigExclusionsSingleError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/config/ingestion/exclusions/{id}", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("servicekey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteV1ConfigExclusionsSingleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of exclusion rules. Note: This does not return usage quota rules.
pub async fn get_v1_config_exclusions(configuration: &configuration::Configuration) -> Result<Vec<crate::models::StreamExclusionRequest>, Error<GetV1ConfigExclusionsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/config/ingestion/exclusions", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("servicekey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetV1ConfigExclusionsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns an exclusion rule with the id specified.
pub async fn get_v1_config_exclusions_single(configuration: &configuration::Configuration, params: GetV1ConfigExclusionsSingleParams) -> Result<Vec<crate::models::StreamExclusionRequest>, Error<GetV1ConfigExclusionsSingleError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/config/ingestion/exclusions/{id}", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("servicekey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetV1ConfigExclusionsSingleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates an existing exclusion rule
pub async fn patch_v1_config_exclusions_single(configuration: &configuration::Configuration, params: PatchV1ConfigExclusionsSingleParams) -> Result<crate::models::StreamExclusionRequest, Error<PatchV1ConfigExclusionsSingleError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let stream_exclusion_request = params.stream_exclusion_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/config/ingestion/exclusions/{id}", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("servicekey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&stream_exclusion_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PatchV1ConfigExclusionsSingleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a new ingestion exclusion rule to help reduce log volume
pub async fn post_v1_config_exclusions(configuration: &configuration::Configuration, params: PostV1ConfigExclusionsParams) -> Result<crate::models::StreamExclusionRequest, Error<PostV1ConfigExclusionsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let stream_exclusion_request = params.stream_exclusion_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/config/ingestion/exclusions", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("servicekey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&stream_exclusion_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostV1ConfigExclusionsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

