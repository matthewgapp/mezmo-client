/*
 * Log Analysis API
 *
 * *REST API to send log data, export data and manage configuration*  To utilize the inline testing functionality here, please go into your Mezmo account and add the following address to your CORS Origins page: `https://docs.mezmo.com`. 
 *
 * The version of the OpenAPI document: 2.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`ingest`]
#[derive(Clone, Debug, Default)]
pub struct IngestParams {
    /// Host name of the source.
    pub hostname: String,
    /// You can send multiple log lines in a request.
    pub ingestlines: crate::models::Ingestlines,
    /// The network mac address of the host computer.
    pub mac: Option<String>,
    /// The local IP address of the host computer.
    pub ip: Option<String>,
    /// The source UNIX timestamp in milliseconds at the time of the request. Used to calculate time drift.
    pub now: Option<String>,
    /// Tags that are used to dynamically group hosts.
    pub tags: Option<String>
}


/// struct for typed errors of method [`ingest`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IngestError {
    Status401(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}


/// Use this method to send logs to a logging instance.  ### Authentication You can find instructions on authentication [here](/log-analysis-api/ref#authentication).  Ingestion is similar to the other APIs, but instead of `servicekey` you will use `apikey` if you are using the header style authentication.  ### Metadata Meta is a field reserved for custom information associated with a log line. To add  metadata to an API call, specify the `meta` field under the lines object. Metadata can be viewed inside that line's context  WARNING: If inconsistent value types are used, that line's metadata, will not be parsed. For example, if a line is passed with a meta object, such as `meta.myfield` of type String, any subsequent lines with `meta.myfield` must have a String as the value type for `meta.myfield`. > Please be aware of [service limits](https://docs.mezmo.com/docs/Mezmo-ingestion-service-limits) > on this endpoint 
pub async fn ingest(configuration: &configuration::Configuration, params: IngestParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<IngestError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let hostname = params.hostname;
    let ingestlines = params.ingestlines;
    let mac = params.mac;
    let ip = params.ip;
    let now = params.now;
    let tags = params.tags;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/logs/ingest", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("hostname", &hostname.to_string())]);
    if let Some(ref local_var_str) = mac {
        local_var_req_builder = local_var_req_builder.query(&[("mac", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ip {
        local_var_req_builder = local_var_req_builder.query(&[("ip", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = now {
        local_var_req_builder = local_var_req_builder.query(&[("now", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tags {
        local_var_req_builder = local_var_req_builder.query(&[("tags", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("apikey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&ingestlines);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IngestError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

