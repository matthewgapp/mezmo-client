/*
 * Log Analysis API
 *
 * *REST API to send log data, export data and manage configuration*  To utilize the inline testing functionality here, please go into your Mezmo account and add the following address to your CORS Origins page: `https://docs.mezmo.com`.
 *
 * The version of the OpenAPI document: 2.1
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use rsb_derive::Builder;

use super::{configuration, Error};
use crate::{apis::ResponseContent, models::export::LogExport};

/// struct for passing parameters to the method [`export`]
#[derive(Clone, Debug, Default)]
pub struct ExportParams {
    /// Start time. Set as UNIX timestamp in seconds or milliseconds.
    pub from: String,
    /// End time. Set as UNIX timestamp in seconds or milliseconds.
    pub to: String,
    /// Number of log lines to include in the export.
    pub size: Option<String>,
    /// Comma-separated list of hosts.
    pub hosts: Option<String>,
    /// Comma-separated list of applications.
    pub apps: Option<String>,
    /// Comma-separated list of log levels.
    pub levels: Option<String>,
    /// Search query.
    pub query: Option<String>,
    /// Defines the log lines that you want to export. Valid values are head, first log lines, and tail, last log lines. If not specified, defaults to tail.
    pub prefer: Option<String>,
    /// Specifies the email with the downloadable link of your export. By default, the log lines are streamed.
    pub email: Option<String>,
    /// Use to set the subject of the email. Use to represent a space. For example, a sample value is Export logs.
    pub email_subject: Option<String>,
}

/// struct for passing parameters to the method [`exportv2`]
#[derive(Clone, Debug, Default, Builder)]
pub struct Exportv2Params {
    /// Start time (inclusive). Set as UNIX timestamp in seconds or milliseconds.
    pub from: String,
    /// End time (inclusive). Set as UNIX timestamp in seconds or milliseconds.
    pub to: String,
    /// Number of log lines to include in the export.
    pub size: Option<String>,
    /// Comma-separated list of hosts.
    pub hosts: Option<String>,
    /// Comma-separated list of applications.
    pub apps: Option<String>,
    /// Comma-separated list of log levels.
    pub levels: Option<String>,
    /// Search query.
    pub query: Option<String>,
    /// Defines the log lines that you want to export. Valid values are head, first log lines, and tail, last log lines. If not specified, defaults to tail.
    pub prefer: Option<String>,
    /// ID that indicates which page of results to be retrieved. Leave empty for the initial export request.
    pub pagination_id: Option<String>,
}

/// struct for typed errors of method [`export`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExportError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`exportv2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Exportv2Error {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// Use this method to export logs in JSON format from a logging instance.
pub async fn export(
    configuration: &configuration::Configuration,
    params: ExportParams,
) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<ExportError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let from = params.from;
    let to = params.to;
    let size = params.size;
    let hosts = params.hosts;
    let apps = params.apps;
    let levels = params.levels;
    let query = params.query;
    let prefer = params.prefer;
    let email = params.email;
    let email_subject = params.email_subject;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/export", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("from", &from.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("to", &to.to_string())]);
    if let Some(ref local_var_str) = size {
        local_var_req_builder =
            local_var_req_builder.query(&[("size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hosts {
        local_var_req_builder =
            local_var_req_builder.query(&[("hosts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = apps {
        local_var_req_builder =
            local_var_req_builder.query(&[("apps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = levels {
        local_var_req_builder =
            local_var_req_builder.query(&[("levels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = query {
        local_var_req_builder =
            local_var_req_builder.query(&[("query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefer {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email {
        local_var_req_builder =
            local_var_req_builder.query(&[("email", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email_subject {
        local_var_req_builder =
            local_var_req_builder.query(&[("emailSubject", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("servicekey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExportError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to export logs in JSON format from a logging instance.
pub async fn exportv2(
    configuration: &configuration::Configuration,
    params: Exportv2Params,
) -> Result<LogExport, Error<Exportv2Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let from = params.from;
    let to = params.to;
    let size = params.size;
    let hosts = params.hosts;
    let apps = params.apps;
    let levels = params.levels;
    let query = params.query;
    let prefer = params.prefer;
    let pagination_id = params.pagination_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/export", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("from", &from.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("to", &to.to_string())]);
    if let Some(ref local_var_str) = size {
        local_var_req_builder =
            local_var_req_builder.query(&[("size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hosts {
        local_var_req_builder =
            local_var_req_builder.query(&[("hosts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = apps {
        local_var_req_builder =
            local_var_req_builder.query(&[("apps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = levels {
        local_var_req_builder =
            local_var_req_builder.query(&[("levels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = query {
        local_var_req_builder =
            local_var_req_builder.query(&[("query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefer {
        local_var_req_builder =
            local_var_req_builder.query(&[("prefer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pagination_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("pagination_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("servicekey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Exportv2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
