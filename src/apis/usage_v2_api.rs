/*
 * Log Analysis API
 *
 * *REST API to send log data, export data and manage configuration*  To utilize the inline testing functionality here, please go into your Mezmo account and add the following address to your CORS Origins page: `https://docs.mezmo.com`. 
 *
 * The version of the OpenAPI document: 2.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_usage_app_v2`]
#[derive(Clone, Debug, Default)]
pub struct GetUsageAppV2Params {
    /// The name of the app from which to get the aggregated usage data.
    pub name: String,
    /// Start time. A date-time string as defined by RFC 3339 §5.6 (\"T\" is required). This date-time will be used to calculate the starting day; the exact time will not be used.
    pub from: String,
    /// End time. A date-time string as defined by RFC 3339 §5.6 (\"T\" is required). This date-time will be used to calculate the ending day; the exact time will not be used.
    pub to: String,
    /// Limit report to apps that contribute to a variable retention pool. Value must be a string indicating the retention pool duration, e.g. `7d` for a seven day retention pool.
    pub retention: Option<String>
}

/// struct for passing parameters to the method [`get_usage_host_v2`]
#[derive(Clone, Debug, Default)]
pub struct GetUsageHostV2Params {
    /// The name of the host from which to get the aggregated usage data.
    pub name: String,
    /// Start time. A date-time string as defined by RFC 3339 §5.6 (\"T\" is required). This date-time will be used to calculate the starting day; the exact time will not be used.
    pub from: String,
    /// End time. A date-time string as defined by RFC 3339 §5.6 (\"T\" is required). This date-time will be used to calculate the ending day; the exact time will not be used.
    pub to: String,
    /// Limit report to hosts that contribute to a variable retention pool. Value must be a string indicating the retention pool duration, e.g. `7d` for a seven day retention pool.
    pub retention: Option<String>
}

/// struct for passing parameters to the method [`get_usage_tag_v2`]
#[derive(Clone, Debug, Default)]
pub struct GetUsageTagV2Params {
    /// The name of the tag from which to get the aggregated usage data.
    pub name: String,
    /// Start time. A date-time string as defined by RFC 3339 §5.6 (\"T\" is required). This date-time will be used to calculate the starting day; the exact time will not be used.
    pub from: String,
    /// End time. A date-time string as defined by RFC 3339 §5.6 (\"T\" is required). This date-time will be used to calculate the ending day; the exact time will not be used.
    pub to: String,
    /// Limit report to tags that contribute to a variable retention pool. Value must be a string indicating the retention pool duration, e.g. `7d` for a seven day retention pool.
    pub retention: Option<String>
}

/// struct for passing parameters to the method [`list_usage_app_v2`]
#[derive(Clone, Debug, Default)]
pub struct ListUsageAppV2Params {
    /// Start time. A date-time string as defined by RFC 3339 §5.6 (\"T\" is required). This date-time will be used to calculate the starting day; the exact time will not be used.
    pub from: String,
    /// End time. A date-time string as defined by RFC 3339 §5.6 (\"T\" is required). This date-time will be used to calculate the ending day; the exact time will not be used.
    pub to: String,
    /// Maximum amount of apps to retrieve.
    pub limit: Option<i32>,
    /// Limit report to apps that contribute to a variable retention pool. Value must be a string indicating the retention pool duration, e.g. `7d` for a seven day retention pool.
    pub retention: Option<String>
}

/// struct for passing parameters to the method [`list_usage_host_v2`]
#[derive(Clone, Debug, Default)]
pub struct ListUsageHostV2Params {
    /// Start time. A date-time string as defined by RFC 3339 §5.6 (\"T\" is required). This date-time will be used to calculate the starting day; the exact time will not be used.
    pub from: String,
    /// End time. A date-time string as defined by RFC 3339 §5.6 (\"T\" is required). This date-time will be used to calculate the ending day; the exact time will not be used.
    pub to: String,
    /// Maximum amount of hosts to retrieve.
    pub limit: Option<i32>,
    /// Limit report to hosts that contribute to a variable retention pool. Value must be a string indicating the retention pool duration, e.g. `7d` for a seven day retention pool.
    pub retention: Option<String>
}

/// struct for passing parameters to the method [`list_usage_tag_v2`]
#[derive(Clone, Debug, Default)]
pub struct ListUsageTagV2Params {
    /// Start time. A date-time string as defined by RFC 3339 §5.6 (\"T\" is required). This date-time will be used to calculate the starting day; the exact time will not be used.
    pub from: String,
    /// End time. A date-time string as defined by RFC 3339 §5.6 (\"T\" is required). This date-time will be used to calculate the ending day; the exact time will not be used.
    pub to: String,
    /// Maximum amount of tags to retrieve.
    pub limit: Option<i32>,
    /// Limit report to tags that contribute to a variable retention pool. Value must be a string indicating the retention pool duration, e.g. `7d` for a seven day retention pool.
    pub retention: Option<String>
}

/// struct for passing parameters to the method [`list_usage_v2`]
#[derive(Clone, Debug, Default)]
pub struct ListUsageV2Params {
    /// Start time. A date-time string as defined by RFC 3339 §5.6 (\"T\" is required). This date-time will be used to calculate the starting day; the exact time will not be used.
    pub from: String,
    /// End time. A date-time string as defined by RFC 3339 §5.6 (\"T\" is required). This date-time will be used to calculate the ending day; the exact time will not be used.
    pub to: String
}


/// struct for typed errors of method [`get_usage_app_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUsageAppV2Error {
    Status400(crate::models::ListUsageV2400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_usage_host_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUsageHostV2Error {
    Status400(crate::models::ListUsageV2400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_usage_tag_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUsageTagV2Error {
    Status400(crate::models::ListUsageV2400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_usage_app_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListUsageAppV2Error {
    Status400(crate::models::ListUsageV2400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_usage_host_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListUsageHostV2Error {
    Status400(crate::models::ListUsageV2400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_usage_tag_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListUsageTagV2Error {
    Status400(crate::models::ListUsageV2400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_usage_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListUsageV2Error {
    Status400(crate::models::ListUsageV2400Response),
    UnknownValue(serde_json::Value),
}


/// Gets the aggregated usage information for an app matching the name provided as a path parameter during a time period. The `results` will either have a singular item, or be an empty array.
pub async fn get_usage_app_v2(configuration: &configuration::Configuration, params: GetUsageAppV2Params) -> Result<crate::models::ListUsageAppV2200Response, Error<GetUsageAppV2Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let from = params.from;
    let to = params.to;
    let retention = params.retention;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/usage/apps/{name}", local_var_configuration.base_path, name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("from", &from.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("to", &to.to_string())]);
    if let Some(ref local_var_str) = retention {
        local_var_req_builder = local_var_req_builder.query(&[("retention", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("servicekey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetUsageAppV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets the aggregated usage information for a host matching the name provided as a path parameter during a time period. The `results` will either have a singular item, or be an empty array.
pub async fn get_usage_host_v2(configuration: &configuration::Configuration, params: GetUsageHostV2Params) -> Result<crate::models::ListUsageHostV2200Response, Error<GetUsageHostV2Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let from = params.from;
    let to = params.to;
    let retention = params.retention;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/usage/hosts/{name}", local_var_configuration.base_path, name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("from", &from.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("to", &to.to_string())]);
    if let Some(ref local_var_str) = retention {
        local_var_req_builder = local_var_req_builder.query(&[("retention", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("servicekey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetUsageHostV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets the aggregated usage information for a tag matching the name provided as a path parameter during a time period. The `results` will either have a singular item, or be an empty array.
pub async fn get_usage_tag_v2(configuration: &configuration::Configuration, params: GetUsageTagV2Params) -> Result<crate::models::ListUsageTagV2200Response, Error<GetUsageTagV2Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let from = params.from;
    let to = params.to;
    let retention = params.retention;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/usage/tags/{name}", local_var_configuration.base_path, name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("from", &from.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("to", &to.to_string())]);
    if let Some(ref local_var_str) = retention {
        local_var_req_builder = local_var_req_builder.query(&[("retention", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("servicekey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetUsageTagV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists aggregated usage information for all apps during a time period.
pub async fn list_usage_app_v2(configuration: &configuration::Configuration, params: ListUsageAppV2Params) -> Result<crate::models::ListUsageAppV2200Response, Error<ListUsageAppV2Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let from = params.from;
    let to = params.to;
    let limit = params.limit;
    let retention = params.retention;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/usage/apps", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("from", &from.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("to", &to.to_string())]);
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = retention {
        local_var_req_builder = local_var_req_builder.query(&[("retention", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("servicekey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListUsageAppV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists aggregated usage information for all hosts during a time period.
pub async fn list_usage_host_v2(configuration: &configuration::Configuration, params: ListUsageHostV2Params) -> Result<crate::models::ListUsageHostV2200Response, Error<ListUsageHostV2Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let from = params.from;
    let to = params.to;
    let limit = params.limit;
    let retention = params.retention;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/usage/hosts", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("from", &from.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("to", &to.to_string())]);
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = retention {
        local_var_req_builder = local_var_req_builder.query(&[("retention", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("servicekey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListUsageHostV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists aggregated usage information for all tags during a time period.
pub async fn list_usage_tag_v2(configuration: &configuration::Configuration, params: ListUsageTagV2Params) -> Result<crate::models::ListUsageTagV2200Response, Error<ListUsageTagV2Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let from = params.from;
    let to = params.to;
    let limit = params.limit;
    let retention = params.retention;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/usage/tags", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("from", &from.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("to", &to.to_string())]);
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = retention {
        local_var_req_builder = local_var_req_builder.query(&[("retention", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("servicekey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListUsageTagV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get aggregated usage information for an account's data during a time period.
pub async fn list_usage_v2(configuration: &configuration::Configuration, params: ListUsageV2Params) -> Result<crate::models::ListUsageV2200Response, Error<ListUsageV2Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let from = params.from;
    let to = params.to;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/usage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("from", &from.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("to", &to.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("servicekey", local_var_value);
    };
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListUsageV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

