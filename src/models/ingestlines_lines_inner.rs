/*
 * Log Analysis API
 *
 * *REST API to send log data, export data and manage configuration*  To utilize the inline testing functionality here, please go into your Mezmo account and add the following address to your CORS Origins page: `https://docs.mezmo.com`. 
 *
 * The version of the OpenAPI document: 2.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IngestlinesLinesInner {
    /// UNIX timestamp, including milliseconds, when the log entry was recorded.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    /// Text of the log line.
    #[serde(rename = "line")]
    pub line: String,
    /// Name of the application that generates the log line.
    #[serde(rename = "app", skip_serializing_if = "Option::is_none")]
    pub app: Option<String>,
    /// Set a value for the level. For example, sample values for this parameter are INFO, WARNING, ERROR.
    #[serde(rename = "level", skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// This field is reserved for custom information that is associated with a log line. To add metadata to an API call, specify the meta field under the lines object. Metadata can be viewed inside that line's context.
    #[serde(rename = "meta", skip_serializing_if = "Option::is_none")]
    pub meta: Option<String>,
}

impl IngestlinesLinesInner {
    pub fn new(line: String) -> IngestlinesLinesInner {
        IngestlinesLinesInner {
            timestamp: None,
            line,
            app: None,
            level: None,
            meta: None,
        }
    }
}


