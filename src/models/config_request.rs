/*
 * Log Analysis API
 *
 * *REST API to send log data, export data and manage configuration*  To utilize the inline testing functionality here, please go into your Mezmo account and add the following address to your CORS Origins page: `https://docs.mezmo.com`. 
 *
 * The version of the OpenAPI document: 2.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConfigRequest {
    /// Name of a view.
    #[serde(rename = "name")]
    pub name: String,
    /// Search query.
    #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
    pub query: Option<String>,
    #[serde(rename = "hosts", skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,
    #[serde(rename = "apps", skip_serializing_if = "Option::is_none")]
    pub apps: Option<Vec<String>>,
    #[serde(rename = "levels", skip_serializing_if = "Option::is_none")]
    pub levels: Option<Vec<String>>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<String>>,
    /// ID of a preset alert.
    #[serde(rename = "presetid", skip_serializing_if = "Option::is_none")]
    pub presetid: Option<String>,
    #[serde(rename = "channels", skip_serializing_if = "Option::is_none")]
    pub channels: Option<Vec<crate::models::Channel>>,
}

impl ConfigRequest {
    pub fn new(name: String) -> ConfigRequest {
        ConfigRequest {
            name,
            query: None,
            hosts: None,
            apps: None,
            levels: None,
            tags: None,
            category: None,
            presetid: None,
            channels: None,
        }
    }
}


